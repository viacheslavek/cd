
Приведем описание абстрактного и конкретного синтаксиса для задания

Определения структур, объединений и перечислений языка Си.
В инициализаторах перечислений допустимы знаки операций +, -, *, /, sizeof,
операндами могут служить имена перечислимых значений и целые числа.

Числовые константы могут быть только целочисленными и десятичными.

Примеры синтаксиса можно увидеть в папке tests

Поначалу я составлял синтаксис сам, но спустя часы некорректного составления я обратился к стандарту
ISO/IEC 9899:1999 (E), где почерпнул некоторые идеи

Абстрактный синтаксис:

Изначально мне дается набор структур, перечеслений и объеденений

Declaration -> DeclarationSpecifiers ;

DeclarationSpecifiers -> TypeSpecifier DeclarationSpecifiersOpt

DeclarationSpecifiersOpt -> DeclarationSpecifiers | ε

TypeSpecifier -> SimpleType
                    | EnumSpecifier
                    | StructOrUnionSpecifier

SimpleType -> CHAR | SHORT | INT | LONG | FLOAT | DOUBLE | SIGNED | UNSIGNED


EnumSpecifier -> ENUM IdentifierOpt { EnumeratorList }
                    | ENUM IdentifierOpt { EnumeratorList , }
                    | ENUM Identifier

EnumeratorList -> Enumerator | EnumeratorList , Enumerator

Enumerator -> EnumeratorConstant | EnumeratorConstant = ConstantExpression

IdentifierOpt -> Identifier | ε

EnumeratorConstant -> Identifier

Identifier -> IDENTIFIER


// Опустим многие преобразования из ISO и упростим до нужного нам примера

ConstantExpression -> Expression

Expression -> VARNAME
                | Const
                | Expression BinaryOperation Expression
                | UnaryOperation Expression

Const -> INT_CONST | REAL_CONST

BinaryOperation -> + | - | * | /

UnaryOperation -> + | - | sizeof ( TypeName )

TypeName -> TypeSpecifier AbstractDeclaratorOpt

AbstractDeclaratorOpt -> AbstractDeclarator | ε

AbstractDeclarator -> Pointer | PointerOpt DirectAbstractDeclarator

PointerOpt -> Pointer | ε

Pointer -> * PointerOpt

DirectAbstractDeclaratorOpt -> DirectAbstractDeclarator | ε

DirectAbstractDeclarator -> ( AbstractDeclarator )
                                | DirectAbstractDeclaratorOpt [ Expression ]



StructOrUnionSpecifier -> StructOrUnion IdentifierOpt { StructDeclarationList }
                            | StructOrUnion Identifier

StructOrUnion -> STRUCT | UNION

StructDeclarationList -> StructDeclaration
                            | StructDeclarationList StructDeclaration

StructDeclaration -> TypeSpecifier ;








Конкретный синтаксис:

Declaration -> DeclarationSpecifiers ;

DeclarationSpecifiers -> TypeSpecifier DeclarationSpecifiersOpt

DeclarationSpecifiersOpt -> DeclarationSpecifiers | ε

TypeSpecifier -> CHAR | SHORT | INT | LONG | FLOAT | DOUBLE | SIGNED | UNSIGNED
                        | EnumSpecifier
                        | StructOrUnionSpecifier


EnumSpecifier -> ENUM IdentifierOpt { EnumeratorList }
                    | ENUM IdentifierOpt { EnumeratorList , }
                    | ENUM Identifier

EnumeratorList -> Enumerator | EnumeratorList , Enumerator

Enumerator -> EnumeratorConstant | EnumeratorConstant = ConstantExpression

IdentifierOpt -> Identifier | ε

EnumeratorConstant -> Identifier

Identifier -> IDENTIFIER


// Опустим многие преобразования из ISO и упростим до нужного нам примера

ConstantExpression -> Expression

Expression -> AdditiveExpression

AdditiveExpression -> MultiplicativeExpression
                        | AdditiveExpression + MultiplicativeExpression
                        | AdditiveExpression - MultiplicativeExpression

MultiplicativeExpression -> UnaryExpression
                                | MultiplicativeExpression * UnaryExpression
                                | MultiplicativeExpression / UnaryExpression

UnaryExpression -> UnaryOperator PrimaryExpression | SIZEOF ( TypeName )

PrimaryExpression -> Identifier | Constant | ( Expression )

Constant -> INT_CONSTANT | REAL_CONSTANT

TypeName -> TypeSpecifier AbstractDeclaratorOpt

AbstractDeclaratorOpt -> AbstractDeclarator | ε

AbstractDeclarator -> Pointer | PointerOpt DirectAbstractDeclarator

PointerOpt -> Pointer | ε

Pointer -> * PointerOpt

DirectAbstractDeclaratorOpt -> DirectAbstractDeclarator | ε

DirectAbstractDeclarator -> ( AbstractDeclarator )
                                | DirectAbstractDeclaratorOpt [ Expression ]



StructOrUnionSpecifier -> StructOrUnion IdentifierOpt { StructDeclarationList }
                            | StructOrUnion Identifier

StructOrUnion -> STRUCT | UNION

StructDeclarationList -> StructDeclaration
                            | StructDeclarationList StructDeclaration

StructDeclaration -> TypeSpecifier ;


Перейдем к реализации











// Пока сокращу грамматику до enum без арифметики, без сложных переменных и реализую ее:

Program -> DeclarationList                                     // готово

DeclarationList -> Declaration | DeclarationList Declaration   // готово

Declaration -> TypeSpecifier AbstractDeclaratorOpt ;           // готово

AbstractDeclaratorOpt -> AbstractDeclarator | ε                // готово

// Пока упрощу переменные

AbstractDeclarator -> IDENTIFIER                               // готово

TypeSpecifier -> SimpleTypeSpecifier                           // готово
                    | EnumTypeSpecifier

SimpleTypeSpecifier -> SimpleType                                // готово ?

SimpleType -> CHAR | SHORT | INT | LONG | FLOAT | DOUBLE | SIGNED | UNSIGNED     // готово ?

EnumTypeSpecifier -> EnumType                                            // готово ?

EnumType -> ENUM EnumStatement                                           // готово ?

EnumStatement -> FullEnumStatement | EmptyEnumStatement             // готово ?

FullEnumStatement -> IdentifierOpt { EnumeratorList CommaOpt }      // готово ?

EmptyEnumStatement -> IDENTIFIER                                   // готово ?

CommaOpt -> , | ε                                                   // готово ?

EnumeratorList -> Enumerator | EnumeratorList , Enumerator          // готово ?

Enumerator -> EnumeratorConstant EnumeratorExpressionOpt            // готово ?

EnumeratorConstant -> IDENTIFIER                                     // готово ?

IdentifierOpt -> IDENTIFIER | ε                                      // готово ?


EnumeratorExpressionOpt -> = ConstantExpression | ε                  // готово ?

// Пока упрощу выражения

ConstantExpression -> INT                                   // готово ?










NSimpleType |= KW_CHAR, lambda: SimpleType.Char
NSimpleType |= KW_SHORT, lambda: SimpleType.Short
NSimpleType |= KW_INT, lambda: SimpleType.Int
NSimpleType |= KW_LONG, lambda: SimpleType.Long
NSimpleType |= KW_FLOAT, lambda: SimpleType.Float
NSimpleType |= KW_DOUBLE, lambda: SimpleType.Double
NSimpleType |= KW_SIGNED, lambda: SimpleType.Signed
NSimpleType |= KW_UNSIGNED, lambda: SimpleType.Unsigned











// Еще сильнее упрощаю грамматику

Program -> DeclarationList

DeclarationList -> Declaration | DeclarationList Declaration

// TODO: вместо AbstractDeclaratorOpt нужно AbstractDeclaratorsOpt, который раскрывается в список из AbstractDeclarator

Declaration -> TypeSpecifier AbstractDeclaratorOpt ;

TypeSpecifier -> SimpleTypeSpecifier
                    | EnumTypeSpecifier

AbstractDeclaratorOpt -> AbstractDeclarator | ε

// TODO:  Потом это усложнится - добавится возможный указатель в начале и возможные скобки [...] в конце
AbstractDeclarator -> IDENTIFIER

// TODO: пока только int без присваивания, но потом это должно превратиться в SimpleTypeSpecifier -> SimpleType
// Где SimpleType  -> в простые типы, а остальное у меня берется из AbstractDeclaratorOpt
SimpleTypeSpecifier |= INT

// TODO: доделать enum
EnumTypeSpecifier |= EnumStatement

// пока пустой enum
EnumStatement -> ENUM

