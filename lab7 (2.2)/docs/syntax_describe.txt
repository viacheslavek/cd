Приведем описание абстрактного и конкретного синтаксиса для задания

Определения структур, объединений и перечислений языка Си.
В инициализаторах перечислений допустимы знаки операций +, -, *, /, sizeof,
операндами могут служить имена перечислимых значений и целые числа.

Числовые константы могут быть только целочисленными и десятичными.

Примеры синтаксиса можно увидеть в папке tests

Поначалу я составлял синтаксис сам, но спустя часы некорректного составления я обратился к стандарту
ISO/IEC 9899:1999 (E), где почерпнул некоторые идеи

Абстрактный синтаксис (старая версия):

Declaration -> DeclarationSpecifiers ;

DeclarationSpecifiers -> TypeSpecifier DeclarationSpecifiersOpt

DeclarationSpecifiersOpt -> DeclarationSpecifiers | ε

TypeSpecifier -> SimpleType
                    | EnumSpecifier
                    | StructOrUnionSpecifier

SimpleType -> CHAR | SHORT | INT | LONG | FLOAT | DOUBLE | SIGNED | UNSIGNED


EnumSpecifier -> ENUM IdentifierOpt { EnumeratorList }
                    | ENUM IdentifierOpt { EnumeratorList , }
                    | ENUM Identifier

EnumeratorList -> Enumerator | EnumeratorList , Enumerator

Enumerator -> EnumeratorConstant | EnumeratorConstant = ConstantExpression

IdentifierOpt -> Identifier | ε

EnumeratorConstant -> Identifier

Identifier -> IDENTIFIER


// Опустим многие преобразования из ISO и упростим до нужного нам примера

ConstantExpression -> Expression

Expression -> VARNAME
                | Const
                | Expression BinaryOperation Expression
                | UnaryOperation Expression

Const -> INT_CONST | REAL_CONST

BinaryOperation -> + | - | * | /

UnaryOperation -> + | - | sizeof ( TypeName )

TypeName -> TypeSpecifier AbstractDeclaratorOpt

AbstractDeclaratorOpt -> AbstractDeclarator | ε

AbstractDeclarator -> Pointer | PointerOpt DirectAbstractDeclarator

PointerOpt -> Pointer | ε

Pointer -> * PointerOpt

DirectAbstractDeclaratorOpt -> DirectAbstractDeclarator | ε

DirectAbstractDeclarator -> ( AbstractDeclarator )
                                | DirectAbstractDeclaratorOpt [ Expression ]



StructOrUnionSpecifier -> StructOrUnion IdentifierOpt { StructDeclarationList }
                            | StructOrUnion Identifier

StructOrUnion -> STRUCT | UNION

StructDeclarationList -> StructDeclaration
                            | StructDeclarationList StructDeclaration

StructDeclaration -> TypeSpecifier ;








Конкретный синтаксис (старая версия):

Declaration -> DeclarationSpecifiers ;

DeclarationSpecifiers -> TypeSpecifier DeclarationSpecifiersOpt

DeclarationSpecifiersOpt -> DeclarationSpecifiers | ε

TypeSpecifier -> CHAR | SHORT | INT | LONG | FLOAT | DOUBLE | SIGNED | UNSIGNED
                        | EnumSpecifier
                        | StructOrUnionSpecifier


EnumSpecifier -> ENUM IdentifierOpt { EnumeratorList }
                    | ENUM IdentifierOpt { EnumeratorList , }
                    | ENUM Identifier

EnumeratorList -> Enumerator | EnumeratorList , Enumerator

Enumerator -> EnumeratorConstant | EnumeratorConstant = ConstantExpression

IdentifierOpt -> Identifier | ε

EnumeratorConstant -> Identifier

Identifier -> IDENTIFIER


// Опустим многие преобразования из ISO и упростим до нужного нам примера

ConstantExpression -> Expression

Expression -> AdditiveExpression

AdditiveExpression -> MultiplicativeExpression
                        | AdditiveExpression + MultiplicativeExpression
                        | AdditiveExpression - MultiplicativeExpression

MultiplicativeExpression -> UnaryExpression
                                | MultiplicativeExpression * UnaryExpression
                                | MultiplicativeExpression / UnaryExpression

UnaryExpression -> UnaryOperator PrimaryExpression | SIZEOF ( TypeName )

PrimaryExpression -> Identifier | Constant | ( Expression )

Constant -> INT_CONSTANT | REAL_CONSTANT

TypeName -> TypeSpecifier AbstractDeclaratorOpt

AbstractDeclaratorOpt -> AbstractDeclarator | ε

AbstractDeclarator -> Pointer | PointerOpt DirectAbstractDeclarator

PointerOpt -> Pointer | ε

Pointer -> * PointerOpt

DirectAbstractDeclaratorOpt -> DirectAbstractDeclarator | ε

DirectAbstractDeclarator -> ( AbstractDeclarator )
                                | DirectAbstractDeclaratorOpt [ Expression ]



StructOrUnionSpecifier -> StructOrUnion IdentifierOpt { StructDeclarationList }
                            | StructOrUnion Identifier

StructOrUnion -> STRUCT | UNION

StructDeclarationList -> StructDeclaration
                            | StructDeclarationList StructDeclaration

StructDeclaration -> TypeSpecifier ;


Перейдем к реализации














// Строю новую грамматику с 0

Program -> DeclarationList

DeclarationList -> Declaration | DeclarationList Declaration

Declaration -> TypeSpecifier AbstractDeclaratorsOpt ;


AbstractDeclaratorsOpt -> AbstractDeclarators | ε

AbstractDeclarators -> AbstractDeclarators , AbstractDeclarator | AbstractDeclarator

AbstractDeclaratorOpt -> AbstractDeclarator | ε


AbstractDeclarator -> NPointerOpt IDENTIFIER


AbstractDeclarator -> NPointerOpt IDENTIFIER ListArraysOpt

NPointerOpt -> POINTER

ListArraysOpt -> [ ModifySimpleType ] ListArraysOpt | ε

ModifySimpleType -> SimpleType | IDENTIFIER

TypeSpecifier -> SimpleTypeSpecifier
                    | EnumTypeSpecifier


SimpleTypeSpecifier -> SimpleType

SimpleType -> CHAR | SHORT | INT | LONG | FLOAT | DOUBLE | SIGNED | UNSIGNED


EnumTypeSpecifier -> ENUM EnumStatement

EnumStatement -> FullEnumStatement | EmptyEnumStatement

FullEnumStatement -> IdentifierOpt { EnumeratorList CommaOpt }

IdentifierOpt -> IDENTIFIER | ε

EmptyEnumStatement -> IDENTIFIER

EnumeratorList -> EnumeratorList , Enumerator | Enumerator

Enumerator -> IDENTIFIER EnumeratorExpressionOpt

EnumeratorExpressionOpt -> = ConstantExpression | ε


CommaOpt -> , | ε


//  TODO: потом добавить сюда выражения математические
ConstantExpression -> INT
