enum ScreenType1 {
  SCREEN_TYPE_TEXT1
} screen_type1;

enum Color {
  COLOR_RED = 1,
  COLOR_GREEN = 2,
  COLOR_BLUE = 2*2,
  COLOR_HIGHLIGHT = 8,
  COLOR_MAX = 2*2 + 4 * (3 + 3),
};

enum Color colour2;

enum ScreenType4 {
  SCREEN_TYPE_TEXT,
  SCREEN_TYPE_GRAPHIC,
  BUFFER_SIZE
} screen_type;

enum {
  SCREEN_TYPE_TEXT2
} screen_type2;

enum {
  HPIXELS = 480,
  WPIXELS = 640,
  HCHARS = 24,
  WCHARS = 80,
};

enum {
  PAGE_SIZE = 4096,
  PAGES_FOR_BUFFER = (BUFFER_SIZE + PAGE_SIZE - 1) / PAGE_SIZE
};

enum {
  PAGE_SIZE2 = -HPIXELS,
  PAGES_FOR_BUFFER2 = (WPIXELS + HCHARS - 1) / WCHARS
};

enum {
  PAGE_SIZE3 = PAGES_FOR_BUFFER2 + 1,
};

enum {
  PAGE_SIZE4 = HPIXELS,
};

struct Token {
  struct Fragment {
    struct Pos {
      int line;
      int col;
    } starting, following;
  } fragment;

  union aaa {
    char *name;
    int int_value;
    double float_value1;
    double float_value2;
  } info1;

  union bbb {
    char *name;
    int int_value;
    double float_value1;
    double float_value2;
  } info2;

};

struct Token aaa;

enum {
  PAGE_SIZE_1 = sizeof(struct Token),
  PAGE_SIZE_2 = sizeof(struct Fragment),
  PAGE_SIZE_3 = sizeof(struct Pos),
  PAGE_SIZE_4 = sizeof(union aaa),
  PAGE_SIZE_5 = sizeof(enum Color),
};
