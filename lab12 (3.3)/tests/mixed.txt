struct Coords {
  int x, y;
};

enum ScreenType { aaa = bab } *screenType[5 + 5], **fas;

enum ScreenType { aaa = bab } *screenType2[5 + 5], **fas2;

enum ScreenType { aaa = bab } a1[1], *a2[1], (*a3)[1];

enum Color {
  COLOR_RED = 1,
  COLOR_GREEN = 2,
  COLOR_BLUE = 2*2,
  COLOR_HIGHLIGHT = 8,
};

enum ScreenType {
  SCREEN_TYPE_TEXT,
  SCREEN_TYPE_GRAPHIC
} screen_type;

enum {
  HPIXELS = 480,
  WPIXELS = 640,
  HCHARS = 24,
  WCHARS = 80,
};

struct ScreenChar {
  char symbol;
  enum Color sym_color;
  enum Color back_color;
};

struct TextScreen {
  struct ScreenChar chars[HCHARS][WCHARS];
};

struct GrahpicScreen {
  enum Color pixels[HPIXELS][WPIXELS];
};

union Screen {
  struct TextScreen text;
  struct GraphicScreen graphic;
};

enum {
  PAGE_SIZE = 4096,
  PAGES_FOR_BUFFER = (BUFFER_SIZE + PAGE_SIZE - 1) / PAGE_SIZE
};

struct Token {
  struct Fragment {
    struct Pos {
      int line;
      int col;
    } starting, following;
  } fragment;

  enum { Ident, IntConst, FloatConst } type;

  union {
    char *name;
    int int_value;
    double float_value;
  } info;
};

struct List {
  struct Token value;
  struct List *next;
};
